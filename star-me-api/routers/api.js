var express = require('express');
var UserGithub = require('../services/github/UserGithub');
var RepoGithub = require('../services/github/RepoGithub');
var IssueGithub = require('../services/github/IssueGithub');
var cache = require('memory-cache');

module.exports = function (server, config) {
    var router = express.Router();
    var userGithub = new UserGithub(config);
    router.get('/authenticatedUser', function (req, res) {
        if (req.session.user) {
            res.send(req.session.user);
        } else {
            var token = cache.get(req.session.id);
            if (token) {
                console.log(token);
                userGithub.getAuthenticatedUser(token).then(function (user) {
                    req.session.user = user;
                    req.session.save(function (err) {
                        res.send(user);
                    });
                });
            } else {
                res.end();
            }
        }

    });
    var repoGithub = new RepoGithub(config);
    router.get('/search/:keyword', function (req, res) {
        var keyword = req.params.keyword;
        if (keyword) {
            var token = cache.get(req.session.id);
            repoGithub.search(token,keyword).then(function (repos) {
                res.send(repos);
            }).catch(function (err) {
                console.log(err);
            })
        } else {
            res.end();
        }
    });

    var issueGithub = new IssueGithub(config);
    var repos_cache = null;
    router.get('/repos', function(req, res){
        var token = cache.get(req.session.id);
        if(repos_cache){
            res.send(repos_cache);
        }else{
            issueGithub.findAll(token).then(function(result){
                repos_cache = result;
                res.send(result);
            });
        }
        
    });

    router.post('/repos/:name/comments', function(req, res){
        var repoName = decodeURIComponent(req.params.name);
        var comment = req.body.body;
        console.log(repoName,comment);
        var token = cache.get(req.session.id);
        issueGithub.findOne(token,repoName)
        .then(function(result){
            if(result && result.total_count === 1){
                return result.items[0];
            }else{
                //not exist, create a new issue
                var title = '[recommend] ' + repoName;
                var body = 'this issue was generated by star-me system automatically';
                return issueGithub.create(token,title,body).then(function(result){
                    return result;
                });
            }
        })
        .then(function(issue){
            issueGithub.addComment(token,issue.number,comment).then(function(result){
                res.sendStatus(201);
            });
        });     
    });


    server.use('/api', router);
};